import { FilesMap } from './hashes';
import { FetchOptions } from '@zeit/fetch';
import ignore from 'ignore';
import { VercelClientOptions, DeploymentOptions, VercelConfig } from '../types';
type Ignore = ReturnType<typeof ignore>;
export declare const API_FILES = "/v2/files";
declare const EVENTS_ARRAY: readonly ["hashes-calculated", "file-count", "file-uploaded", "all-files-uploaded", "created", "building", "ready", "alias-assigned", "warning", "error", "notice", "tip", "canceled", "checks-registered", "checks-completed", "checks-running", "checks-conclusion-succeeded", "checks-conclusion-failed", "checks-conclusion-skipped", "checks-conclusion-canceled"];
export type DeploymentEventType = typeof EVENTS_ARRAY[number];
export declare const EVENTS: Set<"hashes-calculated" | "file-count" | "file-uploaded" | "all-files-uploaded" | "created" | "building" | "ready" | "alias-assigned" | "warning" | "error" | "notice" | "tip" | "canceled" | "checks-registered" | "checks-completed" | "checks-running" | "checks-conclusion-succeeded" | "checks-conclusion-failed" | "checks-conclusion-skipped" | "checks-conclusion-canceled">;
export declare function getApiDeploymentsUrl(metadata?: Pick<DeploymentOptions, 'builds' | 'functions'>): "/v10/deployments" | "/v13/deployments";
export declare function parseVercelConfig(filePath?: string): Promise<VercelConfig>;
export declare function buildFileTree(path: string | string[], { isDirectory, prebuilt, }: Pick<VercelClientOptions, 'isDirectory' | 'prebuilt'>, debug: Debug): Promise<{
    fileList: string[];
    ignoreList: string[];
}>;
export declare function getVercelIgnore(cwd: string | string[], prebuilt?: boolean): Promise<{
    ig: Ignore;
    ignores: string[];
}>;
interface FetchOpts extends FetchOptions {
    apiUrl?: string;
    method?: string;
    teamId?: string;
    headers?: {
        [key: string]: any;
    };
    userAgent?: string;
}
export declare const fetch: (url: string, token: string, opts?: FetchOpts, debugEnabled?: boolean, useNodeFetch?: boolean) => Promise<any>;
export interface PreparedFile {
    file: string;
    sha?: string;
    size?: number;
    mode: number;
}
export declare const prepareFiles: (files: FilesMap, clientOptions: VercelClientOptions) => PreparedFile[];
export declare function createDebug(debug?: boolean): (...logs: string[]) => void;
type Debug = ReturnType<typeof createDebug>;
export {};
