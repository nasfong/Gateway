"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashes = exports.mapToObject = exports.hash = void 0;
const crypto_1 = require("crypto");
const fs_extra_1 = __importDefault(require("fs-extra"));
const async_sema_1 = require("async-sema");
/**
 * Computes a hash for the given buf.
 *
 * @param {Buffer} file data
 * @return {String} hex digest
 */
function hash(buf) {
    return (0, crypto_1.createHash)('sha1').update(buf).digest('hex');
}
exports.hash = hash;
/**
 * Transforms map to object
 * @param map with hashed files
 * @return {object}
 */
const mapToObject = (map) => {
    const obj = {};
    for (const [key, value] of map) {
        if (typeof key === 'undefined')
            continue;
        obj[key] = value;
    }
    return obj;
};
exports.mapToObject = mapToObject;
/**
 * Computes hashes for the contents of each file given.
 *
 * @param files - absolute file paths
 * @param map - optional map of files to append
 * @return Map of hash digest to file object
 */
async function hashes(files, map = new Map()) {
    const semaphore = new async_sema_1.Sema(100);
    await Promise.all(files.map(async (name) => {
        await semaphore.acquire();
        const stat = await fs_extra_1.default.lstat(name);
        const mode = stat.mode;
        let data;
        const isDirectory = stat.isDirectory();
        let h;
        if (!isDirectory) {
            if (stat.isSymbolicLink()) {
                const link = await fs_extra_1.default.readlink(name);
                data = Buffer.from(link, 'utf8');
            }
            else {
                data = await fs_extra_1.default.readFile(name);
            }
            h = hash(data);
        }
        const entry = map.get(h);
        if (entry) {
            const names = new Set(entry.names);
            names.add(name);
            entry.names = [...names];
        }
        else {
            map.set(h, { names: [name], data, mode });
        }
        semaphore.release();
    }));
    return map;
}
exports.hashes = hashes;
